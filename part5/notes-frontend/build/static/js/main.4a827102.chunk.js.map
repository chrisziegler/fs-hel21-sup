{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportanceOf","label","important","content","onClick","id","baseUrl","axios","get","then","response","data","newObject","post","put","Notification","message","className","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","addNote","event","a","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","find","n","changedNote","map","setTimeout","filter","notesToShow","onSubmit","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"4MAceA,EAdF,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,mBACdC,EAAQF,EAAKG,UACf,qBACA,iBACJ,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAAS,kBAAMJ,EAAmBD,EAAKM,KAA/C,SACGJ,Q,gBCPHK,EAAU,aAyBD,EAvBA,WASb,OARgBC,IAAMC,IAAIF,GAQXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5B,EAXA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACN,EAAIO,GAElB,OADgBL,IAAMO,IAAN,UAAaR,EAAb,YAAwBD,GAAMO,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SClBrCI,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,qBAAKC,UAAU,QAAf,SAAwBD,KAG3BE,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GA2FSC,EAnFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACAC,qBAAU,WAERC,IAAqBzB,MAAK,SAAA0B,GAExBT,EAASS,QAEV,IAEH,IAAMC,EAAO,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACdD,EAAME,iBACAC,EAAa,CACjBrC,QAASwB,EACTc,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,IALf,SAOWX,EAAmBM,GAP9B,OAOVM,EAPU,OAQdpB,EAASD,EAAMsB,OAAOD,IACtBlB,EAAW,IATG,2CAAH,sDAcP5B,EAAkB,uCAAG,WAAMK,GAAN,mBAAAiC,EAAA,6DACnBvC,EAAO0B,EAAMuB,MAAK,SAAAC,GAAC,OAAIA,EAAE5C,KAAOA,KAChC6C,EAFmB,2BAGpBnD,GAHoB,IAIvBG,WAAYH,EAAKG,YAJM,kBAOEgC,EACvB7B,EACA6C,GATqB,OAOnBJ,EAPmB,OAWvBpB,EACED,EAAM0B,KAAI,SAAApD,GAAI,OACZA,EAAKM,KAAOA,EAAKN,EAAO+C,MAbL,gDAiBvBd,EAAgB,SAAD,OACJjC,EAAKI,QADD,sCAGfiD,YAAW,WACTpB,EAAgB,QACf,KACHN,EAASD,EAAM4B,QAAO,SAAAJ,GAAC,OAAIA,EAAE5C,KAAOA,MAvBb,yDAAH,sDA2BlBiD,EAAczB,EAChBJ,EACAA,EAAM4B,QAAO,SAAAtD,GAAI,OAAIA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcc,QAASe,IACvB,6BACGuB,EAAYH,KAAI,SAAApD,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,mBAAoBA,GAFfD,EAAKM,SAMhB,yBAAQD,QAAS,kBAAM0B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAEhC,uBAAM0B,SAAUnB,EAAhB,UACE,uBAAOoB,MAAO7B,EAAS8B,SAlDR,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAAgB9B,EAAW8B,EAAOF,UAmDjD,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,QCvGNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4a827102.chunk.js","sourcesContent":["const Note = ({ note, toggleImportanceOf }) => {\r\n  const label = note.important\r\n    ? 'make not important'\r\n    : 'make important';\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={() => toggleImportanceOf(note.id)}>\r\n        {label}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  // testing the error this \"deleted\" note generates\r\n  // const nonExisting = {\r\n  //   id: 10000,\r\n  //   content: 'This note is not saved to server',\r\n  //   date: '2019-05-30T17:30:31.098Z',\r\n  //   important: true,\r\n  // }\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n/* eslint import/no-anonymous-default-export: [2, {\"allowObject\": true}] */\r\nexport default { getAll, create, update }\r\n","import { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of\n        Helsinki 2021\n      </em>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  useEffect(() => {\n    // console.log('effect');\n    noteService.getAll().then(initialNotes => {\n      // console.log('response fulfilled');\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const addNote = async event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n    let returnedNote = await noteService.create(noteObject);\n    setNotes(notes.concat(returnedNote));\n    setNewNote('');\n  };\n\n  const handleChange = ({ target }) => setNewNote(target.value);\n\n  const toggleImportanceOf = async id => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = {\n      ...note,\n      important: !note.important,\n    };\n    try {\n      let returnedNote = await noteService.update(\n        id,\n        changedNote,\n      );\n      setNotes(\n        notes.map(note =>\n          note.id !== id ? note : returnedNote,\n        ),\n      );\n    } catch (err) {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`,\n      );\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    }\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <ul>\n        {notesToShow.map(note => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportanceOf={toggleImportanceOf}\n          />\n        ))}\n      </ul>\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}